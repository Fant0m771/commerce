<?php

/**
 * @file
 * Allows a single customer profile to be reused (and edited).
 */

/**
 * Implements hook_menu().
 */
function commerce_single_address_menu() {
  $items['admin/commerce/config/single-address'] = array(
    'title' => 'Single address settings',
    'description' => 'Configure the single address behavior.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_single_address_settings_page'),
    'access arguments' => array('configure store'),
  );

  return $items;
}

/**
 * Returns the single address configuration form.
 */
function commerce_single_address_settings_page($form, &$orm_state) {
  $form['commerce_single_address_profile_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Customer profile types'),
    '#description' => t('Single address behavior will only be enabled for the selected types.'),
    '#options' => commerce_customer_profile_type_get_name(),
    '#default_value' => variable_get('commerce_single_address_profile_types', array('billing')),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 *
 * Changes all customer profile panes to use the single address pane code
 * instead.
 */
function commerce_customer_commerce_checkout_pane_info_alter(&$checkout_panes) {
  $enabled_types = variable_get('commerce_single_address_profile_types', array('billing'));
  $enabled_types = array_filter($enabled_types);

  foreach (commerce_customer_profile_types() as $type => $profile_type) {
    if (in_array($type, $enabled_types)) {
      $checkout_panes['customer_profile_' . $type]['module'] = 'commerce_single_address';
      $checkout_panes['customer_profile_' . $type]['file'] = 'commerce_single_address.checkout_pane.inc';
      $checkout_panes['customer_profile_' . $type]['base'] = 'commerce_single_address_pane';
    }
  }

  return $checkout_panes;
}

/**
 * Loads the latest active profile of the given type for the given user.
 *
 * @param $uid
 *   The uid of the user.
 * @param $type
 *   The type of the profile to load.
 *
 * @return
 *   A commerce customer profile entity if found, FALSE otherwise.
 */
function commerce_single_address_active_profile_load($uid, $type) {
  if (!$uid) {
    return FALSE;
  }

  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'commerce_customer_profile')
        ->entityCondition('bundle', $type)
        ->propertyCondition('uid', $uid)
        ->propertyCondition('status', TRUE)
        ->entityOrderBy('entity_id', 'DESC')
        ->range(0, 1);
  $results = $query->execute();

  if ($results) {
    $profile_ids = array_keys($results['commerce_customer_profile']);
    $profile_id = reset($profile_ids);
    return commerce_customer_profile_load($profile_id);
  }
  else {
    return FALSE;
  }
}
